{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to doccano Text Annotation for Humans doccano is an open source text annotation tool built for human beings. It provides annotation features for text classification, sequence labeling and sequence to sequence. So, you can create labeled data for sentiment analysis, named entity recognition, text summarization and so on. Just create project, upload your data and start annotating. You can build a dataset in hours. Demo You can enjoy this annotation demo . Named entity recognition First demo is one of the sequence labeling tasks, named-entity recognition. You just select text spans and annotate them. Since doccano supports shortcut keys, you can quickly annotate text spans. Sentiment analysis Second demo is one of the text classification tasks, topic classification. Since there may be more than one category, you can annotate multi-labels. Machine translation Final demo is one of the sequence to sequence tasks, machine translation. Since there may be more than one responses in sequence to sequence tasks, you can create multiple responses. Quick Deployment Azure Doccano can be deployed to Azure ( Web App for Containers + PostgreSQL database ) by clicking on the button below: Heroku Doccano can be deployed to Heroku by clicking on the button below: Of course, you can deploy doccano by using heroku-cli . heroku create heroku stack:set container git push heroku master AWS Doccano can be deployed to AWS ( Cloudformation ) by clicking on the button below: Notice: (1) EC2 KeyPair cannot be created automatically, so make sure you have an existing EC2 KeyPair in one region. Or create one yourself . (2) If you want to access doccano via HTTPS in AWS, here is an instruction .","title":"Doccano"},{"location":"#welcome-to-doccano","text":"","title":"Welcome to doccano"},{"location":"#text-annotation-for-humans","text":"doccano is an open source text annotation tool built for human beings. It provides annotation features for text classification, sequence labeling and sequence to sequence. So, you can create labeled data for sentiment analysis, named entity recognition, text summarization and so on. Just create project, upload your data and start annotating. You can build a dataset in hours.","title":"Text Annotation for Humans"},{"location":"#demo","text":"You can enjoy this annotation demo .","title":"Demo"},{"location":"#named-entity-recognition","text":"First demo is one of the sequence labeling tasks, named-entity recognition. You just select text spans and annotate them. Since doccano supports shortcut keys, you can quickly annotate text spans.","title":"Named entity recognition"},{"location":"#sentiment-analysis","text":"Second demo is one of the text classification tasks, topic classification. Since there may be more than one category, you can annotate multi-labels.","title":"Sentiment analysis"},{"location":"#machine-translation","text":"Final demo is one of the sequence to sequence tasks, machine translation. Since there may be more than one responses in sequence to sequence tasks, you can create multiple responses.","title":"Machine translation"},{"location":"#quick-deployment","text":"","title":"Quick Deployment"},{"location":"#azure","text":"Doccano can be deployed to Azure ( Web App for Containers + PostgreSQL database ) by clicking on the button below:","title":"Azure"},{"location":"#heroku","text":"Doccano can be deployed to Heroku by clicking on the button below: Of course, you can deploy doccano by using heroku-cli . heroku create heroku stack:set container git push heroku master","title":"Heroku"},{"location":"#aws","text":"Doccano can be deployed to AWS ( Cloudformation ) by clicking on the button below: Notice: (1) EC2 KeyPair cannot be created automatically, so make sure you have an existing EC2 KeyPair in one region. Or create one yourself . (2) If you want to access doccano via HTTPS in AWS, here is an instruction .","title":"AWS"},{"location":"CODE_OF_CONDUCT/","text":"Contributor Covenant Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hiroki.nakayama.py@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"CODE_OF_CONDUCT/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"CODE_OF_CONDUCT/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"CODE_OF_CONDUCT/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"CODE_OF_CONDUCT/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"CODE_OF_CONDUCT/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at hiroki.nakayama.py@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"CODE_OF_CONDUCT/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"faq/","text":"I can't install doccano. Following list is ordered by from easy to hard. If you are not familiar with Python development, please consider easy setup. One click deployment to Cloud Service. Only you have to do is create an account. Especially Heroku does not require your credit card (if free plan). Notice: (1) EC2 KeyPair cannot be created automatically, so make sure you have an existing EC2 KeyPair in one region. Or create one yourself . (2) If you want to access doccano via HTTPS in AWS, here is an instruction . Use Docker Docker doesn't bother you by the OS, Python version, etc problems. Because an environment for application is packed as a container. Get doccano's image: docker pull doccano/doccano Create & Run doccano container: docker run -d --name doccano -p 8000:80 doccano/doccano Create a user: docker exec doccano tools/create-admin.sh \"admin\" \"admin@example.com\" \"password\" Stop doccano container: docker stop doccano Re-Launch doccano container: docker start doccano Install from source I want to remember you that this is the hardest setup way. You have to install Python/Node.js and type many commands. Install Python Install Node.js Get the source code of doccano: git clone https://github.com/doccano/doccano.git Move to doccano directory: cd doccano Create environment for doccano: virtualenv venv Activate environment: source venv/bin/activate Install required packages: pip install -r requirements.txt Move server directory: cd app/server Build frontend library: npm install Build frontend source code: npm run build Back to server directory: cd ../ Initialize doccano: python manage.py migrate Create user: python manage.py createsuperuser Run doccano: python manage.py runserver Stop doccano: Ctrl+C Re-Launch doccano: python manage.py runserver (Confirm you are at app/server directory and environment is active). I can't upload my data. Please check the following list. File encoding: UTF-8 is appropriate. Filename: alphabetic file name is suitable. File format selection: File format radio button should be selected properly. When you are using JSON/JSONL: Confirm JSON data is valid. You can use JSONLint or some other tool (when JSONL, pick one data and check it). When you are using CSV: Confirm CSV data is valid. You can use Excel or some tools that have import CSV feature. Lack of line: Data file should not contain blank line. Lack of field: Data file should not contain blank field. You don't need your real & all data to validate file format. The picked data & masked data is suitable if your data is large or secret. I want to add annotators. You can create other annotators by Django Admin site .","title":"FAQ"},{"location":"faq/#i-cant-install-doccano","text":"Following list is ordered by from easy to hard. If you are not familiar with Python development, please consider easy setup. One click deployment to Cloud Service. Only you have to do is create an account. Especially Heroku does not require your credit card (if free plan). Notice: (1) EC2 KeyPair cannot be created automatically, so make sure you have an existing EC2 KeyPair in one region. Or create one yourself . (2) If you want to access doccano via HTTPS in AWS, here is an instruction . Use Docker Docker doesn't bother you by the OS, Python version, etc problems. Because an environment for application is packed as a container. Get doccano's image: docker pull doccano/doccano Create & Run doccano container: docker run -d --name doccano -p 8000:80 doccano/doccano Create a user: docker exec doccano tools/create-admin.sh \"admin\" \"admin@example.com\" \"password\" Stop doccano container: docker stop doccano Re-Launch doccano container: docker start doccano Install from source I want to remember you that this is the hardest setup way. You have to install Python/Node.js and type many commands. Install Python Install Node.js Get the source code of doccano: git clone https://github.com/doccano/doccano.git Move to doccano directory: cd doccano Create environment for doccano: virtualenv venv Activate environment: source venv/bin/activate Install required packages: pip install -r requirements.txt Move server directory: cd app/server Build frontend library: npm install Build frontend source code: npm run build Back to server directory: cd ../ Initialize doccano: python manage.py migrate Create user: python manage.py createsuperuser Run doccano: python manage.py runserver Stop doccano: Ctrl+C Re-Launch doccano: python manage.py runserver (Confirm you are at app/server directory and environment is active).","title":"I can't install doccano."},{"location":"faq/#i-cant-upload-my-data","text":"Please check the following list. File encoding: UTF-8 is appropriate. Filename: alphabetic file name is suitable. File format selection: File format radio button should be selected properly. When you are using JSON/JSONL: Confirm JSON data is valid. You can use JSONLint or some other tool (when JSONL, pick one data and check it). When you are using CSV: Confirm CSV data is valid. You can use Excel or some tools that have import CSV feature. Lack of line: Data file should not contain blank line. Lack of field: Data file should not contain blank field. You don't need your real & all data to validate file format. The picked data & masked data is suitable if your data is large or secret.","title":"I can't upload my data."},{"location":"faq/#i-want-to-add-annotators","text":"You can create other annotators by Django Admin site .","title":"I want to add annotators."},{"location":"getting-started/","text":"Getting started Quick install guide First of all, you have to clone the repository: git clone https://github.com/doccano/doccano.git cd doccano To install doccano, there are three options: Option1: Pull the production Docker image docker pull doccano/doccano Option2: Pull the development Docker-Compose images docker-compose pull Option3: Setup Python environment First we need to install the dependencies. Run the following commands: pip install -r requirements.txt cd app Next we need to start the webpack server so that the frontend gets compiled continuously. Run the following commands in a new shell: cd server/static npm install npm run build # npm start # for developers cd .. Usage Let\u2019s start the development server and explore it. Depending on your installation method, there are two options: Option1: Running the Docker image as a Container First, run a Docker container: docker run -d --name doccano -p 8000:80 doccano/doccano Then, execute create-admin.sh script for creating a superuser. docker exec doccano tools/create-admin.sh \"admin\" \"admin@example.com\" \"password\" Option2: Running the development Docker-Compose stack We can use docker-compose to set up the webpack server, django server, database, etc. all in one command: docker-compose up Now, open a Web browser and go to http://127.0.0.1:8000/login/ . You should see the login screen: Option3: Running Django development server Before running, we need to make migration. Run the following command: python manage.py migrate Next we need to create a user who can login to the admin site. Run the following command: python manage.py create_admin --noinput --username \"admin\" --email \"admin@example.com\" --password \"password\" Developers can also validate that the project works as expected by running the tests: python manage.py test server.tests Finally, to start the server, run the following command: python manage.py runserver","title":"Getting started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#quick-install-guide","text":"First of all, you have to clone the repository: git clone https://github.com/doccano/doccano.git cd doccano To install doccano, there are three options:","title":"Quick install guide"},{"location":"getting-started/#option1-pull-the-production-docker-image","text":"docker pull doccano/doccano","title":"Option1: Pull the production Docker image"},{"location":"getting-started/#option2-pull-the-development-docker-compose-images","text":"docker-compose pull","title":"Option2: Pull the development Docker-Compose images"},{"location":"getting-started/#option3-setup-python-environment","text":"First we need to install the dependencies. Run the following commands: pip install -r requirements.txt cd app Next we need to start the webpack server so that the frontend gets compiled continuously. Run the following commands in a new shell: cd server/static npm install npm run build # npm start # for developers cd ..","title":"Option3: Setup Python environment"},{"location":"getting-started/#usage","text":"Let\u2019s start the development server and explore it. Depending on your installation method, there are two options:","title":"Usage"},{"location":"getting-started/#option1-running-the-docker-image-as-a-container","text":"First, run a Docker container: docker run -d --name doccano -p 8000:80 doccano/doccano Then, execute create-admin.sh script for creating a superuser. docker exec doccano tools/create-admin.sh \"admin\" \"admin@example.com\" \"password\"","title":"Option1: Running the Docker image as a Container"},{"location":"getting-started/#option2-running-the-development-docker-compose-stack","text":"We can use docker-compose to set up the webpack server, django server, database, etc. all in one command: docker-compose up Now, open a Web browser and go to http://127.0.0.1:8000/login/ . You should see the login screen:","title":"Option2: Running the development Docker-Compose stack"},{"location":"getting-started/#option3-running-django-development-server","text":"Before running, we need to make migration. Run the following command: python manage.py migrate Next we need to create a user who can login to the admin site. Run the following command: python manage.py create_admin --noinput --username \"admin\" --email \"admin@example.com\" --password \"password\" Developers can also validate that the project works as expected by running the tests: python manage.py test server.tests Finally, to start the server, run the following command: python manage.py runserver","title":"Option3: Running Django development server"},{"location":"project_structure/","text":"Project Structure In doccano v1.x, the application consists of a frontend and backend API. They are stored in the frontend and app directories. . \u251c\u2500\u2500 app \u251c\u2500\u2500 docker-compose.dev.yml \u251c\u2500\u2500 docker-compose.prod.yml \u251c\u2500\u2500 frontend \u251c\u2500\u2500 nginx \u2514\u2500\u2500 tools The other important files/directories are as follows: docker-compose.dev.yml docker-compose.prod.yml nginx tools docker-compose.dev.yml The docker-compose.dev.yml file contains configuration to run a development environment. Once we run the command docker-compose -f docker-compose.dev.yml up , compose runs backend API and frontend development containers. docker-compose.prod.yml The docker-compose.prod.yml file contains configuration to run a production environment. We adopted the three tier architecture. Once we run the command docker-compose -f docker-compose.prod.yml up , compose builds frontend and runs DBMS, backend API and web server containers. nginx The nginx directory contains a nginx configuration file and Docker container. They are used only in docker-compose.prod.yml . tools The tools directory contains some shell scripts. They are used for CI, CD and so on. Frontend The directory structure of the frontend follows Nuxt.js one. See the Nuxt.js documentation for details: Nuxt.js/Directory Structure Backend API The directory structure of the backend api follows Django one. The important directories are as follows: . \u251c\u2500\u2500 api \u251c\u2500\u2500 app \u251c\u2500\u2500 authentification \u2514\u2500\u2500 server app/api The api directory contains backend API application. We use Django Rest Framework to implement the API. If you want to add new API, change the contents of this directory. app/app The app directory contains Django project settings. See Writing your first Django app, part 1 . app/authentification The authentification directory contains authentification application. It is mainly used for user signup. app/server The server directory contains doccano v0.x codes. In the future, this directory will be integrated into the api directory.","title":"Project Structure"},{"location":"project_structure/#project-structure","text":"In doccano v1.x, the application consists of a frontend and backend API. They are stored in the frontend and app directories. . \u251c\u2500\u2500 app \u251c\u2500\u2500 docker-compose.dev.yml \u251c\u2500\u2500 docker-compose.prod.yml \u251c\u2500\u2500 frontend \u251c\u2500\u2500 nginx \u2514\u2500\u2500 tools The other important files/directories are as follows: docker-compose.dev.yml docker-compose.prod.yml nginx tools docker-compose.dev.yml The docker-compose.dev.yml file contains configuration to run a development environment. Once we run the command docker-compose -f docker-compose.dev.yml up , compose runs backend API and frontend development containers. docker-compose.prod.yml The docker-compose.prod.yml file contains configuration to run a production environment. We adopted the three tier architecture. Once we run the command docker-compose -f docker-compose.prod.yml up , compose builds frontend and runs DBMS, backend API and web server containers. nginx The nginx directory contains a nginx configuration file and Docker container. They are used only in docker-compose.prod.yml . tools The tools directory contains some shell scripts. They are used for CI, CD and so on.","title":"Project Structure"},{"location":"project_structure/#frontend","text":"The directory structure of the frontend follows Nuxt.js one. See the Nuxt.js documentation for details: Nuxt.js/Directory Structure","title":"Frontend"},{"location":"project_structure/#backend-api","text":"The directory structure of the backend api follows Django one. The important directories are as follows: . \u251c\u2500\u2500 api \u251c\u2500\u2500 app \u251c\u2500\u2500 authentification \u2514\u2500\u2500 server app/api The api directory contains backend API application. We use Django Rest Framework to implement the API. If you want to add new API, change the contents of this directory. app/app The app directory contains Django project settings. See Writing your first Django app, part 1 . app/authentification The authentification directory contains authentification application. It is mainly used for user signup. app/server The server directory contains doccano v0.x codes. In the future, this directory will be integrated into the api directory.","title":"Backend API"},{"location":"roadmap/","text":"Roadmap Doccano is a fast-moving, community supported project. This roadmap provides guidance about priorities and focus areas of the doccano team and lists the functionality expected in upcoming releases of doccano. Many of these areas are driven by community use cases, and we welcome further contributions to doccano. Current status Doccano is now able to: Annotate a text classification task. Annotate a sequence labeling task. Annotate a sequence to sequence task. Deploy on Azure, AWS and Heroku by 1-click. Deploy anywhere by Docker. Colaborate with many people. Upload a labeled file. Download a labeled dataset. Delete an uploaded document. Confirm annotation statistics. Access via web API. Roadmap This is a list of features on the short term roadmap and beyond: APIs Implement login and registration API. Implement OAuth 2.0 API. Devide AnnotationList API into each task API. Devide AnnotationDetail API into each task API. Enable to search documents by annotated labels. Optimize performance for statistics API. More documentation and tutorials. Project management Enable to manage user by project administrators. Implement RBAC and enable to assign a role to a user by project administrators. Enhance annotation statistics. Annotation Increase the number of annotation tasks such as relation extraction, entity linking, aspect-based sentiment analysis, visual question answering and so on. Introduce a plugin feature to define custom tasks by a user. Enable to automate labeling by using some technologies such as active learning or auto labeling. Enable to annotate by keyword search or some rules. Control sort order on the frontend. More documentation and tutorials. Upload and download Enable to import data from cloud storage like s3. Improve UX by showing progress bar. Support for downloading label definition. Support for custom tokenization. More performance optimizations. Accessibility Support smartphone to enable anyone to annotate anywhere. Enable to customize font and font-family. Enable to customize label color per user. Enable to customize site theme per user. Entire project Design Vue component and use it to implement frontend. Introduce frontend testing framework. Writing frontend testing. Automate frontend testing. Introduce pipenv and separate production and development environment. Enhance backend project structure. Improve project management structure to accelerate the project improvement. Create GitHub page by using mkdocs and move wiki contents to it. Community and engagement New resources for community discussion and feedback. Gather and highlight novel doccano use cases. Track the progress of these features in the GitHub project tracker.","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Doccano is a fast-moving, community supported project. This roadmap provides guidance about priorities and focus areas of the doccano team and lists the functionality expected in upcoming releases of doccano. Many of these areas are driven by community use cases, and we welcome further contributions to doccano.","title":"Roadmap"},{"location":"roadmap/#current-status","text":"Doccano is now able to: Annotate a text classification task. Annotate a sequence labeling task. Annotate a sequence to sequence task. Deploy on Azure, AWS and Heroku by 1-click. Deploy anywhere by Docker. Colaborate with many people. Upload a labeled file. Download a labeled dataset. Delete an uploaded document. Confirm annotation statistics. Access via web API.","title":"Current status"},{"location":"roadmap/#roadmap_1","text":"This is a list of features on the short term roadmap and beyond:","title":"Roadmap"},{"location":"roadmap/#apis","text":"Implement login and registration API. Implement OAuth 2.0 API. Devide AnnotationList API into each task API. Devide AnnotationDetail API into each task API. Enable to search documents by annotated labels. Optimize performance for statistics API. More documentation and tutorials.","title":"APIs"},{"location":"roadmap/#project-management","text":"Enable to manage user by project administrators. Implement RBAC and enable to assign a role to a user by project administrators. Enhance annotation statistics.","title":"Project management"},{"location":"roadmap/#annotation","text":"Increase the number of annotation tasks such as relation extraction, entity linking, aspect-based sentiment analysis, visual question answering and so on. Introduce a plugin feature to define custom tasks by a user. Enable to automate labeling by using some technologies such as active learning or auto labeling. Enable to annotate by keyword search or some rules. Control sort order on the frontend. More documentation and tutorials.","title":"Annotation"},{"location":"roadmap/#upload-and-download","text":"Enable to import data from cloud storage like s3. Improve UX by showing progress bar. Support for downloading label definition. Support for custom tokenization. More performance optimizations.","title":"Upload and download"},{"location":"roadmap/#accessibility","text":"Support smartphone to enable anyone to annotate anywhere. Enable to customize font and font-family. Enable to customize label color per user. Enable to customize site theme per user.","title":"Accessibility"},{"location":"roadmap/#entire-project","text":"Design Vue component and use it to implement frontend. Introduce frontend testing framework. Writing frontend testing. Automate frontend testing. Introduce pipenv and separate production and development environment. Enhance backend project structure. Improve project management structure to accelerate the project improvement. Create GitHub page by using mkdocs and move wiki contents to it.","title":"Entire project"},{"location":"roadmap/#community-and-engagement","text":"New resources for community discussion and feedback. Gather and highlight novel doccano use cases. Track the progress of these features in the GitHub project tracker.","title":"Community and engagement"},{"location":"tutorial/","text":"Tutorial Dataset Here we take an NER annotation task for science fictions to give you a brief tutorial on doccano. Below is a JSON file containing lots of science fictions description with different languages. We need to annotate some entities like people name, book title, date and so on. books.json {\"text\": \"The Hitchhiker's Guide to the Galaxy (sometimes referred to as HG2G, HHGTTGor H2G2) is a comedy science fiction series created by Douglas Adams. Originally a radio comedy broadcast on BBC Radio 4 in 1978, it was later adapted to other formats, including stage shows, novels, comic books, a 1981 TV series, a 1984 video game, and 2005 feature film.\"} {\"text\": \"\u300a\u4e09\u4f53\u300b\u662f\u4e2d\u56fd\u5927\u9646\u4f5c\u5bb6\u5218\u6148\u6b23\u4e8e2006\u5e745\u6708\u81f312\u6708\u5728\u300a\u79d1\u5e7b\u4e16\u754c\u300b\u6742\u5fd7\u4e0a\u8fde\u8f7d\u7684\u4e00\u90e8\u957f\u7bc7\u79d1\u5e7b\u5c0f\u8bf4\uff0c\u51fa\u7248\u540e\u6210\u4e3a\u4e2d\u56fd\u5927\u9646\u6700\u7545\u9500\u7684\u79d1\u5e7b\u957f\u7bc7\u5c0f\u8bf4\u4e4b\u4e00\u30022008\u5e74\uff0c\u8be5\u4e66\u7684\u5355\u884c\u672c\u7531\u91cd\u5e86\u51fa\u7248\u793e\u51fa\u7248\u3002\u672c\u4e66\u662f\u4e09\u4f53\u7cfb\u5217\uff08\u7cfb\u5217\u539f\u540d\u4e3a\uff1a\u5730\u7403\u5f80\u4e8b\u4e09\u90e8\u66f2\uff09\u7684\u7b2c\u4e00\u90e8\uff0c\u8be5\u7cfb\u5217\u7684\u7b2c\u4e8c\u90e8\u300a\u4e09\u4f53II\uff1a\u9ed1\u6697\u68ee\u6797\u300b\u5df2\u7ecf\u4e8e2008\u5e745\u6708\u51fa\u7248\u30022010\u5e7411\u6708\uff0c\u7b2c\u4e09\u90e8\u300a\u4e09\u4f53III\uff1a\u6b7b\u795e\u6c38\u751f\u300b\u51fa\u7248\u53d1\u884c\u3002 2011\u5e74\uff0c\u201c\u5730\u7403\u5f80\u4e8b\u4e09\u90e8\u66f2\u201d\u5728\u53f0\u6e7e\u9646\u7eed\u51fa\u7248\u3002\u5c0f\u8bf4\u7684\u82f1\u6587\u7248\u83b7\u5f97\u7f8e\u56fd\u79d1\u5e7b\u5947\u5e7b\u4f5c\u5bb6\u534f\u4f1a2014\u5e74\u5ea6\u201c\u661f\u4e91\u5956\u201d\u63d0\u540d\uff0c\u5e76\u8363\u83b72015\u5e74\u96e8\u679c\u5956\u6700\u4f73\u5c0f\u8bf4\u5956\u3002\"} {\"text\": \"\u300e\u9280\u6cb3\u82f1\u96c4\u4f1d\u8aac\u300f\uff08\u304e\u3093\u304c\u3048\u3044\u3086\u3046\u3067\u3093\u305b\u3064\uff09\u306f\u3001\u7530\u4e2d\u82b3\u6a39\u306b\u3088\u308bSF\u5c0f\u8aac\u3002\u307e\u305f\u3001\u3053\u308c\u3092\u539f\u4f5c\u3068\u3059\u308b\u30a2\u30cb\u30e1\u3001\u6f2b\u753b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b2\u30fc\u30e0\u3001\u6717\u8aad\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d6\u30c3\u30af\u7b49\u306e\u95a2\u9023\u4f5c\u54c1\u3002\u7565\u79f0\u306f\u300e\u9280\u82f1\u4f1d\u300f\uff08\u304e\u3093\u3048\u3044\u3067\u3093\uff09\u3002\u539f\u4f5c\u306f\u7d2f\u8a08\u767a\u884c\u90e8\u6570\u304c1500\u4e07\u90e8\u3092\u8d85\u3048\u308b\u30d9\u30b9\u30c8\u30bb\u30e9\u30fc\u5c0f\u8aac\u3067\u3042\u308b\u30021982\u5e74\u304b\u30892009\u5e746\u6708\u307e\u3067\u306b\u8907\u6570\u306e\u7248\u3067\u520a\u884c\u3055\u308c\u3001\u767a\u884c\u90e8\u6570\u3092\u4f38\u3070\u3057\u7d9a\u3051\u3066\u3044\u308b\u3002\"} Create a project We need to create a new project for this task. Logging in with the superuser account. To create your project, make sure you\u2019re in the project list page and click Create button. As for this tutorial, we name the project as sequence labeling for books , write some description, choose the sequence labeling task type. Import Data After creating a project, we will see the Dataset page, and click Import dataset button in the Actions menu. We should see the following screen: We choose JSON and click Select a file button. Select books.json and it would be loaded automatically. Define labels Click Labels button in left bar to define our own labels. We should see the label editor page. In label editor page, you can create labels by specifying label text, shortcut key, background color and text color. As for the tutorial, we created some entities related to science fictions. Annotation Next, we are ready to annotate the texts. Just click the Start annotation button in the navigation bar, we can start to annotate the documents. Export Data After the annotation step, we can download the annotated data. Go to the Dataset page and click the Export dataset button in the Action menu. After selecting an export format, click Export . You should see below screen: Here we choose JSONL file to download the data by clicking the button. Below is the annotated result for our tutorial project. sequence_labeling_for_books.json {\"doc_id\": 33, \"text\": \"The Hitchhiker's Guide to the Galaxy (sometimes referred to as HG2G, HHGTTGor H2G2) is a comedy science fiction series created by Douglas Adams. Originally a radio comedy broadcast on BBC Radio 4 in 1978, it was later adapted to other formats, including stage shows, novels, comic books, a 1981 TV series, a 1984 video game, and 2005 feature film.\", \"labels\": [[0, 36, \"Title\"], [63, 67, \"Title\"], [69, 75, \"Title\"], [78, 82, \"Title\"], [89, 111, \"Genre\"], [130, 143, \"Person\"], [158, 180, \"Genre\"], [184, 193, \"Other\"], [199, 203, \"Date\"], [254, 265, \"Genre\"], [267, 273, \"Genre\"], [275, 286, \"Genre\"], [290, 294, \"Date\"], [295, 304, \"Genre\"], [308, 312, \"Date\"], [313, 323, \"Genre\"], [329, 333, \"Date\"], [334, 346, \"Genre\"]], \"username\": \"admin\"} Congratulation! You just mastered how to use doccano for a sequence labeling project.","title":"Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#dataset","text":"Here we take an NER annotation task for science fictions to give you a brief tutorial on doccano. Below is a JSON file containing lots of science fictions description with different languages. We need to annotate some entities like people name, book title, date and so on. books.json {\"text\": \"The Hitchhiker's Guide to the Galaxy (sometimes referred to as HG2G, HHGTTGor H2G2) is a comedy science fiction series created by Douglas Adams. Originally a radio comedy broadcast on BBC Radio 4 in 1978, it was later adapted to other formats, including stage shows, novels, comic books, a 1981 TV series, a 1984 video game, and 2005 feature film.\"} {\"text\": \"\u300a\u4e09\u4f53\u300b\u662f\u4e2d\u56fd\u5927\u9646\u4f5c\u5bb6\u5218\u6148\u6b23\u4e8e2006\u5e745\u6708\u81f312\u6708\u5728\u300a\u79d1\u5e7b\u4e16\u754c\u300b\u6742\u5fd7\u4e0a\u8fde\u8f7d\u7684\u4e00\u90e8\u957f\u7bc7\u79d1\u5e7b\u5c0f\u8bf4\uff0c\u51fa\u7248\u540e\u6210\u4e3a\u4e2d\u56fd\u5927\u9646\u6700\u7545\u9500\u7684\u79d1\u5e7b\u957f\u7bc7\u5c0f\u8bf4\u4e4b\u4e00\u30022008\u5e74\uff0c\u8be5\u4e66\u7684\u5355\u884c\u672c\u7531\u91cd\u5e86\u51fa\u7248\u793e\u51fa\u7248\u3002\u672c\u4e66\u662f\u4e09\u4f53\u7cfb\u5217\uff08\u7cfb\u5217\u539f\u540d\u4e3a\uff1a\u5730\u7403\u5f80\u4e8b\u4e09\u90e8\u66f2\uff09\u7684\u7b2c\u4e00\u90e8\uff0c\u8be5\u7cfb\u5217\u7684\u7b2c\u4e8c\u90e8\u300a\u4e09\u4f53II\uff1a\u9ed1\u6697\u68ee\u6797\u300b\u5df2\u7ecf\u4e8e2008\u5e745\u6708\u51fa\u7248\u30022010\u5e7411\u6708\uff0c\u7b2c\u4e09\u90e8\u300a\u4e09\u4f53III\uff1a\u6b7b\u795e\u6c38\u751f\u300b\u51fa\u7248\u53d1\u884c\u3002 2011\u5e74\uff0c\u201c\u5730\u7403\u5f80\u4e8b\u4e09\u90e8\u66f2\u201d\u5728\u53f0\u6e7e\u9646\u7eed\u51fa\u7248\u3002\u5c0f\u8bf4\u7684\u82f1\u6587\u7248\u83b7\u5f97\u7f8e\u56fd\u79d1\u5e7b\u5947\u5e7b\u4f5c\u5bb6\u534f\u4f1a2014\u5e74\u5ea6\u201c\u661f\u4e91\u5956\u201d\u63d0\u540d\uff0c\u5e76\u8363\u83b72015\u5e74\u96e8\u679c\u5956\u6700\u4f73\u5c0f\u8bf4\u5956\u3002\"} {\"text\": \"\u300e\u9280\u6cb3\u82f1\u96c4\u4f1d\u8aac\u300f\uff08\u304e\u3093\u304c\u3048\u3044\u3086\u3046\u3067\u3093\u305b\u3064\uff09\u306f\u3001\u7530\u4e2d\u82b3\u6a39\u306b\u3088\u308bSF\u5c0f\u8aac\u3002\u307e\u305f\u3001\u3053\u308c\u3092\u539f\u4f5c\u3068\u3059\u308b\u30a2\u30cb\u30e1\u3001\u6f2b\u753b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30b2\u30fc\u30e0\u3001\u6717\u8aad\u3001\u30aa\u30fc\u30c7\u30a3\u30aa\u30d6\u30c3\u30af\u7b49\u306e\u95a2\u9023\u4f5c\u54c1\u3002\u7565\u79f0\u306f\u300e\u9280\u82f1\u4f1d\u300f\uff08\u304e\u3093\u3048\u3044\u3067\u3093\uff09\u3002\u539f\u4f5c\u306f\u7d2f\u8a08\u767a\u884c\u90e8\u6570\u304c1500\u4e07\u90e8\u3092\u8d85\u3048\u308b\u30d9\u30b9\u30c8\u30bb\u30e9\u30fc\u5c0f\u8aac\u3067\u3042\u308b\u30021982\u5e74\u304b\u30892009\u5e746\u6708\u307e\u3067\u306b\u8907\u6570\u306e\u7248\u3067\u520a\u884c\u3055\u308c\u3001\u767a\u884c\u90e8\u6570\u3092\u4f38\u3070\u3057\u7d9a\u3051\u3066\u3044\u308b\u3002\"}","title":"Dataset"},{"location":"tutorial/#create-a-project","text":"We need to create a new project for this task. Logging in with the superuser account. To create your project, make sure you\u2019re in the project list page and click Create button. As for this tutorial, we name the project as sequence labeling for books , write some description, choose the sequence labeling task type.","title":"Create a project"},{"location":"tutorial/#import-data","text":"After creating a project, we will see the Dataset page, and click Import dataset button in the Actions menu. We should see the following screen: We choose JSON and click Select a file button. Select books.json and it would be loaded automatically.","title":"Import Data"},{"location":"tutorial/#define-labels","text":"Click Labels button in left bar to define our own labels. We should see the label editor page. In label editor page, you can create labels by specifying label text, shortcut key, background color and text color. As for the tutorial, we created some entities related to science fictions.","title":"Define labels"},{"location":"tutorial/#annotation","text":"Next, we are ready to annotate the texts. Just click the Start annotation button in the navigation bar, we can start to annotate the documents.","title":"Annotation"},{"location":"tutorial/#export-data","text":"After the annotation step, we can download the annotated data. Go to the Dataset page and click the Export dataset button in the Action menu. After selecting an export format, click Export . You should see below screen: Here we choose JSONL file to download the data by clicking the button. Below is the annotated result for our tutorial project. sequence_labeling_for_books.json {\"doc_id\": 33, \"text\": \"The Hitchhiker's Guide to the Galaxy (sometimes referred to as HG2G, HHGTTGor H2G2) is a comedy science fiction series created by Douglas Adams. Originally a radio comedy broadcast on BBC Radio 4 in 1978, it was later adapted to other formats, including stage shows, novels, comic books, a 1981 TV series, a 1984 video game, and 2005 feature film.\", \"labels\": [[0, 36, \"Title\"], [63, 67, \"Title\"], [69, 75, \"Title\"], [78, 82, \"Title\"], [89, 111, \"Genre\"], [130, 143, \"Person\"], [158, 180, \"Genre\"], [184, 193, \"Other\"], [199, 203, \"Date\"], [254, 265, \"Genre\"], [267, 273, \"Genre\"], [275, 286, \"Genre\"], [290, 294, \"Date\"], [295, 304, \"Genre\"], [308, 312, \"Date\"], [313, 323, \"Genre\"], [329, 333, \"Date\"], [334, 346, \"Genre\"]], \"username\": \"admin\"} Congratulation! You just mastered how to use doccano for a sequence labeling project.","title":"Export Data"},{"location":"advanced/aws_https_settings/","text":"HTTPS settings for doccano in AWS Create hosted zone in Route 53 Create certificate in ACM Create EC2 instance Create ELB Create A record in Route 53 Create hosted zone in Route 53 HTTPS need a domain name. If you don't have one, you can register it by the AWS Route 53 service, or you can get one from other domain seller. After you get a domain name, you can create Hosted Zone by Route 53. If you register domain from Route 53, you can find it in the Hosted Zone . Create certificate in ACM You should replace the domain name by yours. Don't forget to Create record in Route 53 in step 4. After you request a certificate, wait for a while, You should see the status become 'Issued'. Create EC2 instance In this part, you can just click the launch button to create a EC2 instance. Create ELB Click the Create Load Balancer button and select Application Load Balancer . Fill the name, change protocol to HTTPS, and do not forget add at least two availability zones. Make sure the zone that EC2 instance created is included. Select the certificate we created early. You can select the same security groups created when you create the EC2 instance. Or you can create a new one Fill the target group name and leave others defualt. Add the instance to registered. Then review and create. Create A record in Route 53 Back to route 53, and click Create Record Set . Fill the subname and the ELB name in the Alias Target . Finally, you can access the doccano by HTTPS.","title":"AWS HTTPS settings"},{"location":"advanced/aws_https_settings/#https-settings-for-doccano-in-aws","text":"Create hosted zone in Route 53 Create certificate in ACM Create EC2 instance Create ELB Create A record in Route 53","title":"HTTPS settings for doccano in AWS"},{"location":"advanced/aws_https_settings/#create-hosted-zone-in-route-53","text":"HTTPS need a domain name. If you don't have one, you can register it by the AWS Route 53 service, or you can get one from other domain seller. After you get a domain name, you can create Hosted Zone by Route 53. If you register domain from Route 53, you can find it in the Hosted Zone .","title":"Create hosted zone in Route 53"},{"location":"advanced/aws_https_settings/#create-certificate-in-acm","text":"You should replace the domain name by yours. Don't forget to Create record in Route 53 in step 4. After you request a certificate, wait for a while, You should see the status become 'Issued'.","title":"Create certificate in ACM"},{"location":"advanced/aws_https_settings/#create-ec2-instance","text":"In this part, you can just click the launch button to create a EC2 instance.","title":"Create EC2 instance"},{"location":"advanced/aws_https_settings/#create-elb","text":"Click the Create Load Balancer button and select Application Load Balancer . Fill the name, change protocol to HTTPS, and do not forget add at least two availability zones. Make sure the zone that EC2 instance created is included. Select the certificate we created early. You can select the same security groups created when you create the EC2 instance. Or you can create a new one Fill the target group name and leave others defualt. Add the instance to registered. Then review and create.","title":"Create ELB"},{"location":"advanced/aws_https_settings/#create-a-record-in-route-53","text":"Back to route 53, and click Create Record Set . Fill the subname and the ELB name in the Alias Target . Finally, you can access the doccano by HTTPS.","title":"Create A record in Route 53"},{"location":"advanced/oauth2_settings/","text":"This document aims to instruct how to setup OAuth for doccano. doccano now supports social login via GitHub and Active Directory by #75 . In this document, we show GitHub OAuth as an example. Create OAuth App In the upper-right corner of GitHub, click your profile photo, then click Settings . In the left sidebar, click Developer settings . In the left sidebar, click OAuth Apps . Click New OAuth App . In \"Application name\", type the name of your app. In \"Homepage URL\", type the full URL to your app's website. In \"Authorization callback URL\", type the callback URL(e.g. https://example.com/social/complete/github/ ) of your app. Click Register application. Set enviromental variables Once the application is registered, your app's Client ID and Client Secret will be displayed on the following page: Copy the Client ID and Client Secret from the Developer Applications of your app on GitHub. Set the Client ID and Client Secret to enviromental variables: export OAUTH_GITHUB_KEY=YOUR_CLIENT_ID export OAUTH_GITHUB_SECRET=YOUR_CLIENT_SECRET Run server python manage.py runserver Go to login page:","title":"OAuth2 settings"},{"location":"advanced/oauth2_settings/#create-oauth-app","text":"In the upper-right corner of GitHub, click your profile photo, then click Settings . In the left sidebar, click Developer settings . In the left sidebar, click OAuth Apps . Click New OAuth App . In \"Application name\", type the name of your app. In \"Homepage URL\", type the full URL to your app's website. In \"Authorization callback URL\", type the callback URL(e.g. https://example.com/social/complete/github/ ) of your app. Click Register application.","title":"Create OAuth App"},{"location":"advanced/oauth2_settings/#set-enviromental-variables","text":"Once the application is registered, your app's Client ID and Client Secret will be displayed on the following page: Copy the Client ID and Client Secret from the Developer Applications of your app on GitHub. Set the Client ID and Client Secret to enviromental variables: export OAUTH_GITHUB_KEY=YOUR_CLIENT_ID export OAUTH_GITHUB_SECRET=YOUR_CLIENT_SECRET","title":"Set enviromental variables"},{"location":"advanced/oauth2_settings/#run-server","text":"python manage.py runserver Go to login page:","title":"Run server"}]}